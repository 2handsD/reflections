How did viewing a diff between two versions of a file help you see the bug that
was introduced?

Diff (or FC in windows) displays only the text that had been changed, and shows both the 
old and new text, so you don't have to review as much code to locate the bug.

How could having easy access to the entire history of a file make you a more
efficient programmer in the long term?

    I wouldn't need to be afraid to try this approach or that approach because I can always revert.

What do you think are the pros and cons of manually choosing when to create a
commit, like you do in Git, vs having versions automatically saved, like Google
docs does?

    Pro: You can do a new commit for each logical change.
	Con: You might forget to make a commit when you really should commit.

Why do you think some version control systems, like Git, allow saving multiple
files in one commit, while others, like Google Docs, treat each file separately?

    The ability to save multiple files in one commmit gives you a version of
	an entire project.

How can you use the commands git log and git diff to view the history of files?

    git log shows the history of commits with commit ID no.s. 
	git diff <first Id> <2nd Id> Shows the changes between commits (--stat option
	includes statistics about the changes)

How might using version control make you more confident to make changes that
could break something?

    The confidence comes from the knowledge that I can always revert to
	prior versions to identify which version introduced a bug, and what
	changes that version has from the prior version.

Now that you have your workspace set up, what do you want to try using Git for?

    Make a repo and track changes betweeen versions (commits).
