What happens when you initialize a repository? Why do you need to do it?

	A ".git" directory is created for meta data to track the commit history.

How is the staging area different from the working directory and the repository?
What value do you think it offers?

	the staging area is a list of files in the working directory that are waiting
	to be updated in the repository. It can include none, some, or all of the (visible)
	files in the directory. It allows you to commit only the files with 
	changes that you feel should be inlcuded in the next commit. We try to include 
	one logical change in each commit.

How can you use the staging area to make sure you have one commit per logical
change?

	Use "git diff" to see the changes differences between the working directory and the 
	staging area. These are the changes made since the last commit. Commit only the files 
	that have code changes relating to a common logical change. Changes in other files should 
	be committed separately, with a relevant comment.

What are some situations when branches would be helpful in keeping your history
organized? How would branches help?

	Branches would be helpful when trying an experiment on your project, like 
	writing an experimental feature. Also good for working on your own copy (version) 
	while other people are working on other parts of the project.

How do the diagrams help you visualize the branch structure?
	
	They make it easy to see where branches were made and whether they were merged to master.

What is the result of merging two branches together? Why do we represent it in
the diagram the way we do?

	Merging two branches together combines the code in the last commit of each branch
	into one commit. It also combines the histories of the branches, interleaving
	the historical commits into one commit history, ordered chronologically by
	time stamp.

What are the pros and cons of Git's automatic merging vs. always doing merges
manually?

	Automatic merging does a lot of comparison and combining of commits and inter-
	leaves the commit histories of two branches, but it doesn't apply critical 
	reasoning to resolution of merge conflicts, so it will sometimes show you 
	seemingly easy-to-resolve conflicts.
